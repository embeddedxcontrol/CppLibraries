
CppLibrary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005bc  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000055c  20070000  000805bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b0  2007055c  00080b18  0002055c  2**2
                  ALLOC
  3 .stack        00002004  2007060c  00080bc8  0002055c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002055c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020585  2**0
                  CONTENTS, READONLY
  6 .debug_info   000080b7  00000000  00000000  000205de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125f  00000000  00000000  00028695  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001aed  00000000  00000000  000298f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002f8  00000000  00000000  0002b3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002b8  00000000  00000000  0002b6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000029f9  00000000  00000000  0002b991  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005a5b  00000000  00000000  0002e38a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062cf0  00000000  00000000  00033de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000007f4  00000000  00000000  00096ad8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 26 07 20 15 03 08 00 11 03 08 00 11 03 08 00     .&. ............
   80010:	11 03 08 00 11 03 08 00 11 03 08 00 00 00 00 00     ................
	...
   8002c:	11 03 08 00 11 03 08 00 00 00 00 00 11 03 08 00     ................
   8003c:	11 03 08 00 11 03 08 00 11 03 08 00 11 03 08 00     ................
   8004c:	11 03 08 00 11 03 08 00 11 03 08 00 11 03 08 00     ................
   8005c:	11 03 08 00 11 03 08 00 11 03 08 00 00 00 00 00     ................
   8006c:	c1 02 08 00 d5 02 08 00 e9 02 08 00 fd 02 08 00     ................
	...
   80084:	11 03 08 00 11 03 08 00 11 03 08 00 11 03 08 00     ................
   80094:	11 03 08 00 11 03 08 00 11 03 08 00 11 03 08 00     ................
   800a4:	00 00 00 00 11 03 08 00 11 03 08 00 11 03 08 00     ................
   800b4:	11 03 08 00 11 03 08 00 11 03 08 00 11 03 08 00     ................
   800c4:	11 03 08 00 11 03 08 00 11 03 08 00 11 03 08 00     ................
   800d4:	11 03 08 00 11 03 08 00 11 03 08 00 11 03 08 00     ................
   800e4:	11 03 08 00 11 03 08 00 11 03 08 00 11 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007055c 	.word	0x2007055c
   80110:	00000000 	.word	0x00000000
   80114:	000805bc 	.word	0x000805bc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000805bc 	.word	0x000805bc
   80154:	20070560 	.word	0x20070560
   80158:	000805bc 	.word	0x000805bc
   8015c:	00000000 	.word	0x00000000

00080160 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80160:	2308      	movs	r3, #8
   80162:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80164:	2320      	movs	r3, #32
   80166:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80168:	2304      	movs	r3, #4
   8016a:	6003      	str	r3, [r0, #0]
   8016c:	4770      	bx	lr
	...

00080170 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80170:	4b2a      	ldr	r3, [pc, #168]	; (8021c <twi_set_speed+0xac>)
   80172:	4299      	cmp	r1, r3
   80174:	d849      	bhi.n	8020a <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80176:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   8017a:	4299      	cmp	r1, r3
   8017c:	d92b      	bls.n	801d6 <twi_set_speed+0x66>
{
   8017e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80180:	4c27      	ldr	r4, [pc, #156]	; (80220 <twi_set_speed+0xb0>)
   80182:	fba4 3402 	umull	r3, r4, r4, r2
   80186:	0ba4      	lsrs	r4, r4, #14
   80188:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8018a:	4b26      	ldr	r3, [pc, #152]	; (80224 <twi_set_speed+0xb4>)
   8018c:	440b      	add	r3, r1
   8018e:	009b      	lsls	r3, r3, #2
   80190:	fbb2 f2f3 	udiv	r2, r2, r3
   80194:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80196:	2cff      	cmp	r4, #255	; 0xff
   80198:	d939      	bls.n	8020e <twi_set_speed+0x9e>
   8019a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
   8019c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   8019e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801a0:	2cff      	cmp	r4, #255	; 0xff
   801a2:	d90d      	bls.n	801c0 <twi_set_speed+0x50>
   801a4:	2907      	cmp	r1, #7
   801a6:	d1f9      	bne.n	8019c <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   801a8:	0213      	lsls	r3, r2, #8
   801aa:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
   801ac:	0409      	lsls	r1, r1, #16
   801ae:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   801b2:	430b      	orrs	r3, r1
   801b4:	b2e4      	uxtb	r4, r4
   801b6:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
   801b8:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
   801ba:	2000      	movs	r0, #0
}
   801bc:	bc10      	pop	{r4}
   801be:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801c0:	2aff      	cmp	r2, #255	; 0xff
   801c2:	d9f1      	bls.n	801a8 <twi_set_speed+0x38>
   801c4:	2906      	cmp	r1, #6
   801c6:	d8ef      	bhi.n	801a8 <twi_set_speed+0x38>
			ckdiv++;
   801c8:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
   801ca:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801cc:	2aff      	cmp	r2, #255	; 0xff
   801ce:	d9eb      	bls.n	801a8 <twi_set_speed+0x38>
   801d0:	2906      	cmp	r1, #6
   801d2:	d9f9      	bls.n	801c8 <twi_set_speed+0x58>
   801d4:	e7e8      	b.n	801a8 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   801d6:	0049      	lsls	r1, r1, #1
   801d8:	fbb2 f2f1 	udiv	r2, r2, r1
   801dc:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801de:	2aff      	cmp	r2, #255	; 0xff
   801e0:	d911      	bls.n	80206 <twi_set_speed+0x96>
   801e2:	2300      	movs	r3, #0
			ckdiv++;
   801e4:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
   801e6:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801e8:	2aff      	cmp	r2, #255	; 0xff
   801ea:	d901      	bls.n	801f0 <twi_set_speed+0x80>
   801ec:	2b07      	cmp	r3, #7
   801ee:	d1f9      	bne.n	801e4 <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801f0:	0211      	lsls	r1, r2, #8
   801f2:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
   801f4:	041b      	lsls	r3, r3, #16
   801f6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801fa:	430b      	orrs	r3, r1
   801fc:	b2d2      	uxtb	r2, r2
   801fe:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80200:	6102      	str	r2, [r0, #16]
	return PASS;
   80202:	2000      	movs	r0, #0
   80204:	4770      	bx	lr
	uint32_t ckdiv = 0;
   80206:	2300      	movs	r3, #0
   80208:	e7f2      	b.n	801f0 <twi_set_speed+0x80>
		return FAIL;
   8020a:	2001      	movs	r0, #1
   8020c:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8020e:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
   80210:	bf88      	it	hi
   80212:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80214:	d8d8      	bhi.n	801c8 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
   80216:	2100      	movs	r1, #0
   80218:	e7c6      	b.n	801a8 <twi_set_speed+0x38>
   8021a:	bf00      	nop
   8021c:	00061a80 	.word	0x00061a80
   80220:	057619f1 	.word	0x057619f1
   80224:	3ffd1200 	.word	0x3ffd1200

00080228 <twi_master_init>:
{
   80228:	b538      	push	{r3, r4, r5, lr}
   8022a:	4604      	mov	r4, r0
   8022c:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   8022e:	f04f 33ff 	mov.w	r3, #4294967295
   80232:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   80234:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80236:	2380      	movs	r3, #128	; 0x80
   80238:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   8023a:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8023c:	2308      	movs	r3, #8
   8023e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80240:	2320      	movs	r3, #32
   80242:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   80244:	2304      	movs	r3, #4
   80246:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80248:	680a      	ldr	r2, [r1, #0]
   8024a:	6849      	ldr	r1, [r1, #4]
   8024c:	4b05      	ldr	r3, [pc, #20]	; (80264 <twi_master_init+0x3c>)
   8024e:	4798      	blx	r3
   80250:	2801      	cmp	r0, #1
   80252:	bf14      	ite	ne
   80254:	2000      	movne	r0, #0
   80256:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
   80258:	7a6b      	ldrb	r3, [r5, #9]
   8025a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   8025c:	bf04      	itt	eq
   8025e:	2340      	moveq	r3, #64	; 0x40
   80260:	6023      	streq	r3, [r4, #0]
}
   80262:	bd38      	pop	{r3, r4, r5, pc}
   80264:	00080171 	.word	0x00080171

00080268 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80268:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8026a:	4770      	bx	lr

0008026c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8026c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8026e:	4770      	bx	lr

00080270 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80274:	4604      	mov	r4, r0
   80276:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80278:	4b0e      	ldr	r3, [pc, #56]	; (802b4 <pio_handler_process+0x44>)
   8027a:	4798      	blx	r3
   8027c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8027e:	4620      	mov	r0, r4
   80280:	4b0d      	ldr	r3, [pc, #52]	; (802b8 <pio_handler_process+0x48>)
   80282:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80284:	4005      	ands	r5, r0
   80286:	d013      	beq.n	802b0 <pio_handler_process+0x40>
   80288:	4c0c      	ldr	r4, [pc, #48]	; (802bc <pio_handler_process+0x4c>)
   8028a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8028e:	e003      	b.n	80298 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80290:	42b4      	cmp	r4, r6
   80292:	d00d      	beq.n	802b0 <pio_handler_process+0x40>
   80294:	3410      	adds	r4, #16
		while (status != 0) {
   80296:	b15d      	cbz	r5, 802b0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80298:	6820      	ldr	r0, [r4, #0]
   8029a:	4540      	cmp	r0, r8
   8029c:	d1f8      	bne.n	80290 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8029e:	6861      	ldr	r1, [r4, #4]
   802a0:	4229      	tst	r1, r5
   802a2:	d0f5      	beq.n	80290 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   802a4:	68e3      	ldr	r3, [r4, #12]
   802a6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   802a8:	6863      	ldr	r3, [r4, #4]
   802aa:	ea25 0503 	bic.w	r5, r5, r3
   802ae:	e7ef      	b.n	80290 <pio_handler_process+0x20>
   802b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802b4:	00080269 	.word	0x00080269
   802b8:	0008026d 	.word	0x0008026d
   802bc:	20070578 	.word	0x20070578

000802c0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   802c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   802c2:	210b      	movs	r1, #11
   802c4:	4801      	ldr	r0, [pc, #4]	; (802cc <PIOA_Handler+0xc>)
   802c6:	4b02      	ldr	r3, [pc, #8]	; (802d0 <PIOA_Handler+0x10>)
   802c8:	4798      	blx	r3
   802ca:	bd08      	pop	{r3, pc}
   802cc:	400e0e00 	.word	0x400e0e00
   802d0:	00080271 	.word	0x00080271

000802d4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   802d4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   802d6:	210c      	movs	r1, #12
   802d8:	4801      	ldr	r0, [pc, #4]	; (802e0 <PIOB_Handler+0xc>)
   802da:	4b02      	ldr	r3, [pc, #8]	; (802e4 <PIOB_Handler+0x10>)
   802dc:	4798      	blx	r3
   802de:	bd08      	pop	{r3, pc}
   802e0:	400e1000 	.word	0x400e1000
   802e4:	00080271 	.word	0x00080271

000802e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   802e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   802ea:	210d      	movs	r1, #13
   802ec:	4801      	ldr	r0, [pc, #4]	; (802f4 <PIOC_Handler+0xc>)
   802ee:	4b02      	ldr	r3, [pc, #8]	; (802f8 <PIOC_Handler+0x10>)
   802f0:	4798      	blx	r3
   802f2:	bd08      	pop	{r3, pc}
   802f4:	400e1200 	.word	0x400e1200
   802f8:	00080271 	.word	0x00080271

000802fc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   802fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   802fe:	210e      	movs	r1, #14
   80300:	4801      	ldr	r0, [pc, #4]	; (80308 <PIOD_Handler+0xc>)
   80302:	4b02      	ldr	r3, [pc, #8]	; (8030c <PIOD_Handler+0x10>)
   80304:	4798      	blx	r3
   80306:	bd08      	pop	{r3, pc}
   80308:	400e1400 	.word	0x400e1400
   8030c:	00080271 	.word	0x00080271

00080310 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80310:	e7fe      	b.n	80310 <Dummy_Handler>
	...

00080314 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80314:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80316:	4b1c      	ldr	r3, [pc, #112]	; (80388 <Reset_Handler+0x74>)
   80318:	4a1c      	ldr	r2, [pc, #112]	; (8038c <Reset_Handler+0x78>)
   8031a:	429a      	cmp	r2, r3
   8031c:	d010      	beq.n	80340 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8031e:	4b1c      	ldr	r3, [pc, #112]	; (80390 <Reset_Handler+0x7c>)
   80320:	4a19      	ldr	r2, [pc, #100]	; (80388 <Reset_Handler+0x74>)
   80322:	429a      	cmp	r2, r3
   80324:	d20c      	bcs.n	80340 <Reset_Handler+0x2c>
   80326:	3b01      	subs	r3, #1
   80328:	1a9b      	subs	r3, r3, r2
   8032a:	f023 0303 	bic.w	r3, r3, #3
   8032e:	3304      	adds	r3, #4
   80330:	4413      	add	r3, r2
   80332:	4916      	ldr	r1, [pc, #88]	; (8038c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80334:	f851 0b04 	ldr.w	r0, [r1], #4
   80338:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   8033c:	429a      	cmp	r2, r3
   8033e:	d1f9      	bne.n	80334 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80340:	4b14      	ldr	r3, [pc, #80]	; (80394 <Reset_Handler+0x80>)
   80342:	4a15      	ldr	r2, [pc, #84]	; (80398 <Reset_Handler+0x84>)
   80344:	429a      	cmp	r2, r3
   80346:	d20a      	bcs.n	8035e <Reset_Handler+0x4a>
   80348:	3b01      	subs	r3, #1
   8034a:	1a9b      	subs	r3, r3, r2
   8034c:	f023 0303 	bic.w	r3, r3, #3
   80350:	3304      	adds	r3, #4
   80352:	4413      	add	r3, r2
		*pDest++ = 0;
   80354:	2100      	movs	r1, #0
   80356:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8035a:	4293      	cmp	r3, r2
   8035c:	d1fb      	bne.n	80356 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8035e:	4b0f      	ldr	r3, [pc, #60]	; (8039c <Reset_Handler+0x88>)
   80360:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80364:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80368:	490d      	ldr	r1, [pc, #52]	; (803a0 <Reset_Handler+0x8c>)
   8036a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8036c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80374:	d203      	bcs.n	8037e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80376:	688b      	ldr	r3, [r1, #8]
   80378:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8037c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8037e:	4b09      	ldr	r3, [pc, #36]	; (803a4 <Reset_Handler+0x90>)
   80380:	4798      	blx	r3

	/* Branch to main function */
	main();
   80382:	4b09      	ldr	r3, [pc, #36]	; (803a8 <Reset_Handler+0x94>)
   80384:	4798      	blx	r3
   80386:	e7fe      	b.n	80386 <Reset_Handler+0x72>
   80388:	20070000 	.word	0x20070000
   8038c:	000805bc 	.word	0x000805bc
   80390:	2007055c 	.word	0x2007055c
   80394:	2007060c 	.word	0x2007060c
   80398:	2007055c 	.word	0x2007055c
   8039c:	00080000 	.word	0x00080000
   803a0:	e000ed00 	.word	0xe000ed00
   803a4:	00080425 	.word	0x00080425
   803a8:	000803ad 	.word	0x000803ad

000803ac <main>:
	//Configure the TWI in master mode by calling twi_master_init
	twi_master_init(TWI0, &twi_settings);
}

int main (void)
{
   803ac:	b500      	push	{lr}
   803ae:	b085      	sub	sp, #20

	SystemInit();
   803b0:	4b15      	ldr	r3, [pc, #84]	; (80408 <main+0x5c>)
   803b2:	4798      	blx	r3
	PMC->PMC_PCER0 = 0x0;
   803b4:	4b15      	ldr	r3, [pc, #84]	; (8040c <main+0x60>)
   803b6:	2200      	movs	r2, #0
   803b8:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0;
   803ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	twi_settings.speed = I2C_STANDARD_MODE_SPEED;
   803be:	4914      	ldr	r1, [pc, #80]	; (80410 <main+0x64>)
   803c0:	9102      	str	r1, [sp, #8]
	twi_settings.chip = I2C_SLAVE_ADDRESS;
   803c2:	2127      	movs	r1, #39	; 0x27
   803c4:	f88d 100c 	strb.w	r1, [sp, #12]
	twi_settings.master_clk = CHIP_FREQ_CPU_MAX;
   803c8:	4912      	ldr	r1, [pc, #72]	; (80414 <main+0x68>)
   803ca:	9101      	str	r1, [sp, #4]
	twi_settings.smbus = 0;
   803cc:	f88d 200d 	strb.w	r2, [sp, #13]
	PMC->PMC_PCER0 |= (1<<ID_TWI0);
   803d0:	691a      	ldr	r2, [r3, #16]
   803d2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   803d6:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR |= PIO_ABSR_P17 | PIO_ABSR_P18;      //Select Peripheral B (TWI) for Peripheral A18, A17
   803d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   803dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   803de:	f442 22c0 	orr.w	r2, r2, #393216	; 0x60000
   803e2:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PER |= PIO_PA17 | PIO_PA18;               //Enable Peripheral on A17, A18
   803e4:	681a      	ldr	r2, [r3, #0]
   803e6:	f442 22c0 	orr.w	r2, r2, #393216	; 0x60000
   803ea:	601a      	str	r2, [r3, #0]
	PIOA->PIO_PUER |= PIO_PA17 | PIO_PA18;		        //Enalble pull-up resistors on our two communication pins
   803ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   803ee:	f442 22c0 	orr.w	r2, r2, #393216	; 0x60000
   803f2:	665a      	str	r2, [r3, #100]	; 0x64
	twi_enable_master_mode(TWI0);
   803f4:	4c08      	ldr	r4, [pc, #32]	; (80418 <main+0x6c>)
   803f6:	4620      	mov	r0, r4
   803f8:	4b08      	ldr	r3, [pc, #32]	; (8041c <main+0x70>)
   803fa:	4798      	blx	r3
	twi_master_init(TWI0, &twi_settings);
   803fc:	a901      	add	r1, sp, #4
   803fe:	4620      	mov	r0, r4
   80400:	4b07      	ldr	r3, [pc, #28]	; (80420 <main+0x74>)
   80402:	4798      	blx	r3
   80404:	e7fe      	b.n	80404 <main+0x58>
   80406:	bf00      	nop
   80408:	20070001 	.word	0x20070001
   8040c:	400e0600 	.word	0x400e0600
   80410:	000186a0 	.word	0x000186a0
   80414:	0501bd00 	.word	0x0501bd00
   80418:	4008c000 	.word	0x4008c000
   8041c:	00080161 	.word	0x00080161
   80420:	00080229 	.word	0x00080229

00080424 <__libc_init_array>:
   80424:	b570      	push	{r4, r5, r6, lr}
   80426:	4e0f      	ldr	r6, [pc, #60]	; (80464 <__libc_init_array+0x40>)
   80428:	4d0f      	ldr	r5, [pc, #60]	; (80468 <__libc_init_array+0x44>)
   8042a:	1b76      	subs	r6, r6, r5
   8042c:	10b6      	asrs	r6, r6, #2
   8042e:	bf18      	it	ne
   80430:	2400      	movne	r4, #0
   80432:	d005      	beq.n	80440 <__libc_init_array+0x1c>
   80434:	3401      	adds	r4, #1
   80436:	f855 3b04 	ldr.w	r3, [r5], #4
   8043a:	4798      	blx	r3
   8043c:	42a6      	cmp	r6, r4
   8043e:	d1f9      	bne.n	80434 <__libc_init_array+0x10>
   80440:	4e0a      	ldr	r6, [pc, #40]	; (8046c <__libc_init_array+0x48>)
   80442:	4d0b      	ldr	r5, [pc, #44]	; (80470 <__libc_init_array+0x4c>)
   80444:	f000 f8a8 	bl	80598 <_init>
   80448:	1b76      	subs	r6, r6, r5
   8044a:	10b6      	asrs	r6, r6, #2
   8044c:	bf18      	it	ne
   8044e:	2400      	movne	r4, #0
   80450:	d006      	beq.n	80460 <__libc_init_array+0x3c>
   80452:	3401      	adds	r4, #1
   80454:	f855 3b04 	ldr.w	r3, [r5], #4
   80458:	4798      	blx	r3
   8045a:	42a6      	cmp	r6, r4
   8045c:	d1f9      	bne.n	80452 <__libc_init_array+0x2e>
   8045e:	bd70      	pop	{r4, r5, r6, pc}
   80460:	bd70      	pop	{r4, r5, r6, pc}
   80462:	bf00      	nop
   80464:	000805a4 	.word	0x000805a4
   80468:	000805a4 	.word	0x000805a4
   8046c:	000805ac 	.word	0x000805ac
   80470:	000805a4 	.word	0x000805a4

00080474 <register_fini>:
   80474:	4b02      	ldr	r3, [pc, #8]	; (80480 <register_fini+0xc>)
   80476:	b113      	cbz	r3, 8047e <register_fini+0xa>
   80478:	4802      	ldr	r0, [pc, #8]	; (80484 <register_fini+0x10>)
   8047a:	f000 b805 	b.w	80488 <atexit>
   8047e:	4770      	bx	lr
   80480:	00000000 	.word	0x00000000
   80484:	00080495 	.word	0x00080495

00080488 <atexit>:
   80488:	2300      	movs	r3, #0
   8048a:	4601      	mov	r1, r0
   8048c:	461a      	mov	r2, r3
   8048e:	4618      	mov	r0, r3
   80490:	f000 b81e 	b.w	804d0 <__register_exitproc>

00080494 <__libc_fini_array>:
   80494:	b538      	push	{r3, r4, r5, lr}
   80496:	4c0a      	ldr	r4, [pc, #40]	; (804c0 <__libc_fini_array+0x2c>)
   80498:	4d0a      	ldr	r5, [pc, #40]	; (804c4 <__libc_fini_array+0x30>)
   8049a:	1b64      	subs	r4, r4, r5
   8049c:	10a4      	asrs	r4, r4, #2
   8049e:	d00a      	beq.n	804b6 <__libc_fini_array+0x22>
   804a0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   804a4:	3b01      	subs	r3, #1
   804a6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   804aa:	3c01      	subs	r4, #1
   804ac:	f855 3904 	ldr.w	r3, [r5], #-4
   804b0:	4798      	blx	r3
   804b2:	2c00      	cmp	r4, #0
   804b4:	d1f9      	bne.n	804aa <__libc_fini_array+0x16>
   804b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   804ba:	f000 b877 	b.w	805ac <_fini>
   804be:	bf00      	nop
   804c0:	000805bc 	.word	0x000805bc
   804c4:	000805b8 	.word	0x000805b8

000804c8 <__retarget_lock_acquire_recursive>:
   804c8:	4770      	bx	lr
   804ca:	bf00      	nop

000804cc <__retarget_lock_release_recursive>:
   804cc:	4770      	bx	lr
   804ce:	bf00      	nop

000804d0 <__register_exitproc>:
   804d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   804d4:	4d2c      	ldr	r5, [pc, #176]	; (80588 <__register_exitproc+0xb8>)
   804d6:	4606      	mov	r6, r0
   804d8:	6828      	ldr	r0, [r5, #0]
   804da:	4698      	mov	r8, r3
   804dc:	460f      	mov	r7, r1
   804de:	4691      	mov	r9, r2
   804e0:	f7ff fff2 	bl	804c8 <__retarget_lock_acquire_recursive>
   804e4:	4b29      	ldr	r3, [pc, #164]	; (8058c <__register_exitproc+0xbc>)
   804e6:	681c      	ldr	r4, [r3, #0]
   804e8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   804ec:	2b00      	cmp	r3, #0
   804ee:	d03e      	beq.n	8056e <__register_exitproc+0x9e>
   804f0:	685a      	ldr	r2, [r3, #4]
   804f2:	2a1f      	cmp	r2, #31
   804f4:	dc1c      	bgt.n	80530 <__register_exitproc+0x60>
   804f6:	f102 0e01 	add.w	lr, r2, #1
   804fa:	b176      	cbz	r6, 8051a <__register_exitproc+0x4a>
   804fc:	2101      	movs	r1, #1
   804fe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80502:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80506:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8050a:	4091      	lsls	r1, r2
   8050c:	4308      	orrs	r0, r1
   8050e:	2e02      	cmp	r6, #2
   80510:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80514:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80518:	d023      	beq.n	80562 <__register_exitproc+0x92>
   8051a:	3202      	adds	r2, #2
   8051c:	f8c3 e004 	str.w	lr, [r3, #4]
   80520:	6828      	ldr	r0, [r5, #0]
   80522:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80526:	f7ff ffd1 	bl	804cc <__retarget_lock_release_recursive>
   8052a:	2000      	movs	r0, #0
   8052c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80530:	4b17      	ldr	r3, [pc, #92]	; (80590 <__register_exitproc+0xc0>)
   80532:	b30b      	cbz	r3, 80578 <__register_exitproc+0xa8>
   80534:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80538:	f3af 8000 	nop.w
   8053c:	4603      	mov	r3, r0
   8053e:	b1d8      	cbz	r0, 80578 <__register_exitproc+0xa8>
   80540:	2000      	movs	r0, #0
   80542:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80546:	f04f 0e01 	mov.w	lr, #1
   8054a:	6058      	str	r0, [r3, #4]
   8054c:	6019      	str	r1, [r3, #0]
   8054e:	4602      	mov	r2, r0
   80550:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80554:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80558:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8055c:	2e00      	cmp	r6, #0
   8055e:	d0dc      	beq.n	8051a <__register_exitproc+0x4a>
   80560:	e7cc      	b.n	804fc <__register_exitproc+0x2c>
   80562:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80566:	4301      	orrs	r1, r0
   80568:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8056c:	e7d5      	b.n	8051a <__register_exitproc+0x4a>
   8056e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80572:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80576:	e7bb      	b.n	804f0 <__register_exitproc+0x20>
   80578:	6828      	ldr	r0, [r5, #0]
   8057a:	f7ff ffa7 	bl	804cc <__retarget_lock_release_recursive>
   8057e:	f04f 30ff 	mov.w	r0, #4294967295
   80582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80586:	bf00      	nop
   80588:	20070558 	.word	0x20070558
   8058c:	00080594 	.word	0x00080594
   80590:	00000000 	.word	0x00000000

00080594 <_global_impure_ptr>:
   80594:	20070130                                0.. 

00080598 <_init>:
   80598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8059a:	bf00      	nop
   8059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8059e:	bc08      	pop	{r3}
   805a0:	469e      	mov	lr, r3
   805a2:	4770      	bx	lr

000805a4 <__init_array_start>:
   805a4:	00080475 	.word	0x00080475

000805a8 <__frame_dummy_init_array_entry>:
   805a8:	00080119                                ....

000805ac <_fini>:
   805ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805ae:	bf00      	nop
   805b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   805b2:	bc08      	pop	{r3}
   805b4:	469e      	mov	lr, r3
   805b6:	4770      	bx	lr

000805b8 <__fini_array_start>:
   805b8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <__atexit_recursive_mutex>:
20070558:	200705e8                                ... 
