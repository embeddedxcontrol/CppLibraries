
CppLibrary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000056c  20070000  000806b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b0  2007056c  00080c20  0002056c  2**2
                  ALLOC
  3 .stack        00002004  2007061c  00080cd0  0002056c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002056c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020595  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008cef  00000000  00000000  000205ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000147d  00000000  00000000  000292dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001aee  00000000  00000000  0002a75a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000318  00000000  00000000  0002c248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002c8  00000000  00000000  0002c560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00002f7a  00000000  00000000  0002c828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006603  00000000  00000000  0002f7a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062e01  00000000  00000000  00035da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000824  00000000  00000000  00098ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	20 26 07 20 b1 03 08 00 ad 03 08 00 ad 03 08 00      &. ............
   80010:	ad 03 08 00 ad 03 08 00 ad 03 08 00 00 00 00 00     ................
	...
   8002c:	ad 03 08 00 ad 03 08 00 00 00 00 00 ad 03 08 00     ................
   8003c:	ad 03 08 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................
   8004c:	ad 03 08 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................
   8005c:	ad 03 08 00 ad 03 08 00 ad 03 08 00 00 00 00 00     ................
   8006c:	5d 03 08 00 71 03 08 00 85 03 08 00 99 03 08 00     ]...q...........
	...
   80084:	ad 03 08 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................
   80094:	ad 03 08 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................
   800a4:	00 00 00 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................
   800b4:	ad 03 08 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................
   800c4:	ad 03 08 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................
   800d4:	ad 03 08 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................
   800e4:	ad 03 08 00 ad 03 08 00 ad 03 08 00 ad 03 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007056c 	.word	0x2007056c
   80110:	00000000 	.word	0x00000000
   80114:	000806b4 	.word	0x000806b4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000806b4 	.word	0x000806b4
   80154:	20070570 	.word	0x20070570
   80158:	000806b4 	.word	0x000806b4
   8015c:	00000000 	.word	0x00000000

00080160 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80160:	4b2a      	ldr	r3, [pc, #168]	; (8020c <twi_set_speed+0xac>)
   80162:	4299      	cmp	r1, r3
   80164:	d849      	bhi.n	801fa <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80166:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   8016a:	4299      	cmp	r1, r3
   8016c:	d92b      	bls.n	801c6 <twi_set_speed+0x66>
{
   8016e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80170:	4c27      	ldr	r4, [pc, #156]	; (80210 <twi_set_speed+0xb0>)
   80172:	fba4 3402 	umull	r3, r4, r4, r2
   80176:	0ba4      	lsrs	r4, r4, #14
   80178:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8017a:	4b26      	ldr	r3, [pc, #152]	; (80214 <twi_set_speed+0xb4>)
   8017c:	440b      	add	r3, r1
   8017e:	009b      	lsls	r3, r3, #2
   80180:	fbb2 f2f3 	udiv	r2, r2, r3
   80184:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80186:	2cff      	cmp	r4, #255	; 0xff
   80188:	d939      	bls.n	801fe <twi_set_speed+0x9e>
   8018a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
   8018c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   8018e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80190:	2cff      	cmp	r4, #255	; 0xff
   80192:	d90d      	bls.n	801b0 <twi_set_speed+0x50>
   80194:	2907      	cmp	r1, #7
   80196:	d1f9      	bne.n	8018c <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80198:	0213      	lsls	r3, r2, #8
   8019a:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
   8019c:	0409      	lsls	r1, r1, #16
   8019e:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   801a2:	430b      	orrs	r3, r1
   801a4:	b2e4      	uxtb	r4, r4
   801a6:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
   801a8:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
   801aa:	2000      	movs	r0, #0
}
   801ac:	bc10      	pop	{r4}
   801ae:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801b0:	2aff      	cmp	r2, #255	; 0xff
   801b2:	d9f1      	bls.n	80198 <twi_set_speed+0x38>
   801b4:	2906      	cmp	r1, #6
   801b6:	d8ef      	bhi.n	80198 <twi_set_speed+0x38>
			ckdiv++;
   801b8:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
   801ba:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801bc:	2aff      	cmp	r2, #255	; 0xff
   801be:	d9eb      	bls.n	80198 <twi_set_speed+0x38>
   801c0:	2906      	cmp	r1, #6
   801c2:	d9f9      	bls.n	801b8 <twi_set_speed+0x58>
   801c4:	e7e8      	b.n	80198 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   801c6:	0049      	lsls	r1, r1, #1
   801c8:	fbb2 f2f1 	udiv	r2, r2, r1
   801cc:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801ce:	2aff      	cmp	r2, #255	; 0xff
   801d0:	d911      	bls.n	801f6 <twi_set_speed+0x96>
   801d2:	2300      	movs	r3, #0
			ckdiv++;
   801d4:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
   801d6:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801d8:	2aff      	cmp	r2, #255	; 0xff
   801da:	d901      	bls.n	801e0 <twi_set_speed+0x80>
   801dc:	2b07      	cmp	r3, #7
   801de:	d1f9      	bne.n	801d4 <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801e0:	0211      	lsls	r1, r2, #8
   801e2:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
   801e4:	041b      	lsls	r3, r3, #16
   801e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801ea:	430b      	orrs	r3, r1
   801ec:	b2d2      	uxtb	r2, r2
   801ee:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   801f0:	6102      	str	r2, [r0, #16]
	return PASS;
   801f2:	2000      	movs	r0, #0
   801f4:	4770      	bx	lr
	uint32_t ckdiv = 0;
   801f6:	2300      	movs	r3, #0
   801f8:	e7f2      	b.n	801e0 <twi_set_speed+0x80>
		return FAIL;
   801fa:	2001      	movs	r0, #1
   801fc:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801fe:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
   80200:	bf88      	it	hi
   80202:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80204:	d8d8      	bhi.n	801b8 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
   80206:	2100      	movs	r1, #0
   80208:	e7c6      	b.n	80198 <twi_set_speed+0x38>
   8020a:	bf00      	nop
   8020c:	00061a80 	.word	0x00061a80
   80210:	057619f1 	.word	0x057619f1
   80214:	3ffd1200 	.word	0x3ffd1200

00080218 <twi_master_init>:
{
   80218:	b538      	push	{r3, r4, r5, lr}
   8021a:	4604      	mov	r4, r0
   8021c:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   8021e:	f04f 33ff 	mov.w	r3, #4294967295
   80222:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   80224:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80226:	2380      	movs	r3, #128	; 0x80
   80228:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   8022a:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8022c:	2308      	movs	r3, #8
   8022e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80230:	2320      	movs	r3, #32
   80232:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   80234:	2304      	movs	r3, #4
   80236:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80238:	680a      	ldr	r2, [r1, #0]
   8023a:	6849      	ldr	r1, [r1, #4]
   8023c:	4b05      	ldr	r3, [pc, #20]	; (80254 <twi_master_init+0x3c>)
   8023e:	4798      	blx	r3
   80240:	2801      	cmp	r0, #1
   80242:	bf14      	ite	ne
   80244:	2000      	movne	r0, #0
   80246:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
   80248:	7a6b      	ldrb	r3, [r5, #9]
   8024a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   8024c:	bf04      	itt	eq
   8024e:	2340      	moveq	r3, #64	; 0x40
   80250:	6023      	streq	r3, [r4, #0]
}
   80252:	bd38      	pop	{r3, r4, r5, pc}
   80254:	00080161 	.word	0x00080161

00080258 <twi_mk_addr>:
	if (len == 0)
   80258:	460a      	mov	r2, r1
   8025a:	b159      	cbz	r1, 80274 <twi_mk_addr+0x1c>
	val = addr[0];
   8025c:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
   8025e:	2901      	cmp	r1, #1
		val |= addr[1];
   80260:	bfc4      	itt	gt
   80262:	7841      	ldrbgt	r1, [r0, #1]
   80264:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
   80268:	2a02      	cmp	r2, #2
   8026a:	dd04      	ble.n	80276 <twi_mk_addr+0x1e>
		val |= addr[2];
   8026c:	7882      	ldrb	r2, [r0, #2]
   8026e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   80272:	e000      	b.n	80276 <twi_mk_addr+0x1e>
		return 0;
   80274:	2300      	movs	r3, #0
}
   80276:	4618      	mov	r0, r3
   80278:	4770      	bx	lr
	...

0008027c <twi_master_write>:
{
   8027c:	b570      	push	{r4, r5, r6, lr}
	uint32_t cnt = p_packet->length;
   8027e:	68cd      	ldr	r5, [r1, #12]
	if (cnt == 0) {
   80280:	2d00      	cmp	r5, #0
   80282:	d035      	beq.n	802f0 <twi_master_write+0x74>
   80284:	460b      	mov	r3, r1
   80286:	4604      	mov	r4, r0
	uint8_t *buffer = p_packet->buffer;
   80288:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
   8028a:	2000      	movs	r0, #0
   8028c:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8028e:	7c0a      	ldrb	r2, [r1, #16]
   80290:	0412      	lsls	r2, r2, #16
   80292:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80296:	6849      	ldr	r1, [r1, #4]
   80298:	0209      	lsls	r1, r1, #8
   8029a:	f401 7140 	and.w	r1, r1, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8029e:	430a      	orrs	r2, r1
   802a0:	6062      	str	r2, [r4, #4]
	p_twi->TWI_IADR = 0;
   802a2:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   802a4:	6859      	ldr	r1, [r3, #4]
   802a6:	4618      	mov	r0, r3
   802a8:	4b15      	ldr	r3, [pc, #84]	; (80300 <twi_master_write+0x84>)
   802aa:	4798      	blx	r3
   802ac:	60e0      	str	r0, [r4, #12]
		status = p_twi->TWI_SR;
   802ae:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
   802b0:	f413 7f80 	tst.w	r3, #256	; 0x100
   802b4:	d006      	beq.n	802c4 <twi_master_write+0x48>
			return TWI_RECEIVE_NACK;
   802b6:	2505      	movs	r5, #5
   802b8:	e01b      	b.n	802f2 <twi_master_write+0x76>
	while (cnt > 0) {
   802ba:	b15d      	cbz	r5, 802d4 <twi_master_write+0x58>
		status = p_twi->TWI_SR;
   802bc:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
   802be:	f413 7f80 	tst.w	r3, #256	; 0x100
   802c2:	d118      	bne.n	802f6 <twi_master_write+0x7a>
		if (!(status & TWI_SR_TXRDY)) {
   802c4:	f013 0f04 	tst.w	r3, #4
   802c8:	d0f7      	beq.n	802ba <twi_master_write+0x3e>
		p_twi->TWI_THR = *buffer++;
   802ca:	7833      	ldrb	r3, [r6, #0]
   802cc:	6363      	str	r3, [r4, #52]	; 0x34
		cnt--;
   802ce:	3d01      	subs	r5, #1
		p_twi->TWI_THR = *buffer++;
   802d0:	3601      	adds	r6, #1
   802d2:	e7f2      	b.n	802ba <twi_master_write+0x3e>
		status = p_twi->TWI_SR;
   802d4:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
   802d6:	f413 7f80 	tst.w	r3, #256	; 0x100
   802da:	d10e      	bne.n	802fa <twi_master_write+0x7e>
		if (status & TWI_SR_TXRDY) {
   802dc:	f013 0f04 	tst.w	r3, #4
   802e0:	d0f8      	beq.n	802d4 <twi_master_write+0x58>
	p_twi->TWI_CR = TWI_CR_STOP;
   802e2:	2302      	movs	r3, #2
   802e4:	6023      	str	r3, [r4, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   802e6:	6a23      	ldr	r3, [r4, #32]
   802e8:	f013 0f01 	tst.w	r3, #1
   802ec:	d0fb      	beq.n	802e6 <twi_master_write+0x6a>
   802ee:	e000      	b.n	802f2 <twi_master_write+0x76>
		return TWI_INVALID_ARGUMENT;
   802f0:	2501      	movs	r5, #1
}
   802f2:	4628      	mov	r0, r5
   802f4:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
   802f6:	2505      	movs	r5, #5
   802f8:	e7fb      	b.n	802f2 <twi_master_write+0x76>
			return TWI_RECEIVE_NACK;
   802fa:	2505      	movs	r5, #5
   802fc:	e7f9      	b.n	802f2 <twi_master_write+0x76>
   802fe:	bf00      	nop
   80300:	00080259 	.word	0x00080259

00080304 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80304:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80306:	4770      	bx	lr

00080308 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80308:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8030a:	4770      	bx	lr

0008030c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8030c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80310:	4604      	mov	r4, r0
   80312:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80314:	4b0e      	ldr	r3, [pc, #56]	; (80350 <pio_handler_process+0x44>)
   80316:	4798      	blx	r3
   80318:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8031a:	4620      	mov	r0, r4
   8031c:	4b0d      	ldr	r3, [pc, #52]	; (80354 <pio_handler_process+0x48>)
   8031e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80320:	4005      	ands	r5, r0
   80322:	d013      	beq.n	8034c <pio_handler_process+0x40>
   80324:	4c0c      	ldr	r4, [pc, #48]	; (80358 <pio_handler_process+0x4c>)
   80326:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8032a:	e003      	b.n	80334 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8032c:	42b4      	cmp	r4, r6
   8032e:	d00d      	beq.n	8034c <pio_handler_process+0x40>
   80330:	3410      	adds	r4, #16
		while (status != 0) {
   80332:	b15d      	cbz	r5, 8034c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80334:	6820      	ldr	r0, [r4, #0]
   80336:	4540      	cmp	r0, r8
   80338:	d1f8      	bne.n	8032c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8033a:	6861      	ldr	r1, [r4, #4]
   8033c:	4229      	tst	r1, r5
   8033e:	d0f5      	beq.n	8032c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80340:	68e3      	ldr	r3, [r4, #12]
   80342:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80344:	6863      	ldr	r3, [r4, #4]
   80346:	ea25 0503 	bic.w	r5, r5, r3
   8034a:	e7ef      	b.n	8032c <pio_handler_process+0x20>
   8034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80350:	00080305 	.word	0x00080305
   80354:	00080309 	.word	0x00080309
   80358:	20070588 	.word	0x20070588

0008035c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8035c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8035e:	210b      	movs	r1, #11
   80360:	4801      	ldr	r0, [pc, #4]	; (80368 <PIOA_Handler+0xc>)
   80362:	4b02      	ldr	r3, [pc, #8]	; (8036c <PIOA_Handler+0x10>)
   80364:	4798      	blx	r3
   80366:	bd08      	pop	{r3, pc}
   80368:	400e0e00 	.word	0x400e0e00
   8036c:	0008030d 	.word	0x0008030d

00080370 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80370:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80372:	210c      	movs	r1, #12
   80374:	4801      	ldr	r0, [pc, #4]	; (8037c <PIOB_Handler+0xc>)
   80376:	4b02      	ldr	r3, [pc, #8]	; (80380 <PIOB_Handler+0x10>)
   80378:	4798      	blx	r3
   8037a:	bd08      	pop	{r3, pc}
   8037c:	400e1000 	.word	0x400e1000
   80380:	0008030d 	.word	0x0008030d

00080384 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80384:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80386:	210d      	movs	r1, #13
   80388:	4801      	ldr	r0, [pc, #4]	; (80390 <PIOC_Handler+0xc>)
   8038a:	4b02      	ldr	r3, [pc, #8]	; (80394 <PIOC_Handler+0x10>)
   8038c:	4798      	blx	r3
   8038e:	bd08      	pop	{r3, pc}
   80390:	400e1200 	.word	0x400e1200
   80394:	0008030d 	.word	0x0008030d

00080398 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80398:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8039a:	210e      	movs	r1, #14
   8039c:	4801      	ldr	r0, [pc, #4]	; (803a4 <PIOD_Handler+0xc>)
   8039e:	4b02      	ldr	r3, [pc, #8]	; (803a8 <PIOD_Handler+0x10>)
   803a0:	4798      	blx	r3
   803a2:	bd08      	pop	{r3, pc}
   803a4:	400e1400 	.word	0x400e1400
   803a8:	0008030d 	.word	0x0008030d

000803ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   803ac:	e7fe      	b.n	803ac <Dummy_Handler>
	...

000803b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   803b0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   803b2:	4b1c      	ldr	r3, [pc, #112]	; (80424 <Reset_Handler+0x74>)
   803b4:	4a1c      	ldr	r2, [pc, #112]	; (80428 <Reset_Handler+0x78>)
   803b6:	429a      	cmp	r2, r3
   803b8:	d010      	beq.n	803dc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   803ba:	4b1c      	ldr	r3, [pc, #112]	; (8042c <Reset_Handler+0x7c>)
   803bc:	4a19      	ldr	r2, [pc, #100]	; (80424 <Reset_Handler+0x74>)
   803be:	429a      	cmp	r2, r3
   803c0:	d20c      	bcs.n	803dc <Reset_Handler+0x2c>
   803c2:	3b01      	subs	r3, #1
   803c4:	1a9b      	subs	r3, r3, r2
   803c6:	f023 0303 	bic.w	r3, r3, #3
   803ca:	3304      	adds	r3, #4
   803cc:	4413      	add	r3, r2
   803ce:	4916      	ldr	r1, [pc, #88]	; (80428 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   803d0:	f851 0b04 	ldr.w	r0, [r1], #4
   803d4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   803d8:	429a      	cmp	r2, r3
   803da:	d1f9      	bne.n	803d0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   803dc:	4b14      	ldr	r3, [pc, #80]	; (80430 <Reset_Handler+0x80>)
   803de:	4a15      	ldr	r2, [pc, #84]	; (80434 <Reset_Handler+0x84>)
   803e0:	429a      	cmp	r2, r3
   803e2:	d20a      	bcs.n	803fa <Reset_Handler+0x4a>
   803e4:	3b01      	subs	r3, #1
   803e6:	1a9b      	subs	r3, r3, r2
   803e8:	f023 0303 	bic.w	r3, r3, #3
   803ec:	3304      	adds	r3, #4
   803ee:	4413      	add	r3, r2
		*pDest++ = 0;
   803f0:	2100      	movs	r1, #0
   803f2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   803f6:	4293      	cmp	r3, r2
   803f8:	d1fb      	bne.n	803f2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803fa:	4b0f      	ldr	r3, [pc, #60]	; (80438 <Reset_Handler+0x88>)
   803fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80400:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80404:	490d      	ldr	r1, [pc, #52]	; (8043c <Reset_Handler+0x8c>)
   80406:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80408:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8040c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80410:	d203      	bcs.n	8041a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80412:	688b      	ldr	r3, [r1, #8]
   80414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80418:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8041a:	4b09      	ldr	r3, [pc, #36]	; (80440 <Reset_Handler+0x90>)
   8041c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8041e:	4b09      	ldr	r3, [pc, #36]	; (80444 <Reset_Handler+0x94>)
   80420:	4798      	blx	r3
   80422:	e7fe      	b.n	80422 <Reset_Handler+0x72>
   80424:	20070000 	.word	0x20070000
   80428:	000806b4 	.word	0x000806b4
   8042c:	2007056c 	.word	0x2007056c
   80430:	2007061c 	.word	0x2007061c
   80434:	2007056c 	.word	0x2007056c
   80438:	00080000 	.word	0x00080000
   8043c:	e000ed00 	.word	0xe000ed00
   80440:	0008051d 	.word	0x0008051d
   80444:	00080449 	.word	0x00080449

00080448 <main>:
	twi_master_init(TWI1, &twi_settings);
}


int main (void)
{
   80448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8044c:	b08a      	sub	sp, #40	; 0x28
	twi_packet_t i2cdata;
	//uint8_t byteToLcd = 0x0;
	uint8_t byteToLcd[1];	
	
	SystemInit();
   8044e:	4b2b      	ldr	r3, [pc, #172]	; (804fc <main+0xb4>)
   80450:	4798      	blx	r3
	delay_init(CHIP_FREQ_CPU_MAX);
	
	PMC->PMC_PCER0 = 0x0;
   80452:	4b2b      	ldr	r3, [pc, #172]	; (80500 <main+0xb8>)
   80454:	2400      	movs	r4, #0
   80456:	611c      	str	r4, [r3, #16]
	PMC->PMC_PCER1 = 0x0;
   80458:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	twi_settings.speed = I2C_STANDARD_MODE_SPEED;
   8045c:	4a29      	ldr	r2, [pc, #164]	; (80504 <main+0xbc>)
   8045e:	9202      	str	r2, [sp, #8]
	twi_settings.chip = I2C_SLAVE_ADDRESS;
   80460:	2527      	movs	r5, #39	; 0x27
   80462:	f88d 500c 	strb.w	r5, [sp, #12]
	twi_settings.master_clk = CHIP_FREQ_CPU_MAX;
   80466:	4a28      	ldr	r2, [pc, #160]	; (80508 <main+0xc0>)
   80468:	9201      	str	r2, [sp, #4]
	twi_settings.smbus = 0;
   8046a:	f88d 400d 	strb.w	r4, [sp, #13]
	PMC->PMC_PCER0 |= (1<<ID_TWI1);
   8046e:	691a      	ldr	r2, [r3, #16]
   80470:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80474:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER0 |= (1<<ID_PIOB);
   80476:	691a      	ldr	r2, [r3, #16]
   80478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   8047c:	611a      	str	r2, [r3, #16]
	PIOB->PIO_PDR = PIO_PB12 | PIO_PB13;
   8047e:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
   80482:	f44f 5240 	mov.w	r2, #12288	; 0x3000
   80486:	605a      	str	r2, [r3, #4]
	PIOB->PIO_ODR = PIO_PB12 | PIO_PB13;
   80488:	615a      	str	r2, [r3, #20]
	PIOB->PIO_ABSR = 0x0;
   8048a:	671c      	str	r4, [r3, #112]	; 0x70
	twi_master_init(TWI1, &twi_settings);
   8048c:	a901      	add	r1, sp, #4
   8048e:	481f      	ldr	r0, [pc, #124]	; (8050c <main+0xc4>)
   80490:	4b1f      	ldr	r3, [pc, #124]	; (80510 <main+0xc8>)
   80492:	4798      	blx	r3

	uint8_t cols = 20;
	uint8_t lines = 4;
	uint8_t dotsize = 0x08;

	i2cdata.chip = I2C_SLAVE_ADDRESS;
   80494:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	i2cdata.addr[0] = 0x0;
   80498:	f88d 4014 	strb.w	r4, [sp, #20]
	i2cdata.addr_length = 0;
   8049c:	9406      	str	r4, [sp, #24]
	i2cdata.length = 1;
   8049e:	2301      	movs	r3, #1
   804a0:	9308      	str	r3, [sp, #32]
		*/
			
		byteToLcd[0] = 0x1;
		i2cdata.buffer = &byteToLcd;
			
		twi_master_write(TWI1,&i2cdata);
   804a2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8050c <main+0xc4>
   804a6:	4f1b      	ldr	r7, [pc, #108]	; (80514 <main+0xcc>)

		delay_ms(10);
   804a8:	f64e 2660 	movw	r6, #60000	; 0xea60
		byteToLcd[0] = 0x1;
   804ac:	f04f 0a01 	mov.w	sl, #1
   804b0:	ac0a      	add	r4, sp, #40	; 0x28
   804b2:	f804 ad18 	strb.w	sl, [r4, #-24]!
		i2cdata.buffer = &byteToLcd;
   804b6:	9407      	str	r4, [sp, #28]
		twi_master_write(TWI1,&i2cdata);
   804b8:	a905      	add	r1, sp, #20
   804ba:	4640      	mov	r0, r8
   804bc:	47b8      	blx	r7
		delay_ms(10);
   804be:	4630      	mov	r0, r6
   804c0:	4d15      	ldr	r5, [pc, #84]	; (80518 <main+0xd0>)
   804c2:	47a8      	blx	r5
						
		byteToLcd[0] = 0x8;
   804c4:	f04f 0908 	mov.w	r9, #8
   804c8:	f88d 9010 	strb.w	r9, [sp, #16]
		i2cdata.buffer = &byteToLcd;
   804cc:	9407      	str	r4, [sp, #28]
			
		twi_master_write(TWI1, &i2cdata);
   804ce:	a905      	add	r1, sp, #20
   804d0:	4640      	mov	r0, r8
   804d2:	47b8      	blx	r7
			
		delay_ms(10);
   804d4:	4630      	mov	r0, r6
   804d6:	47a8      	blx	r5

		byteToLcd[0] = 0x1;
   804d8:	f88d a010 	strb.w	sl, [sp, #16]
		i2cdata.buffer = &byteToLcd;
   804dc:	9407      	str	r4, [sp, #28]

		twi_master_write(TWI1, &i2cdata);
   804de:	a905      	add	r1, sp, #20
   804e0:	4640      	mov	r0, r8
   804e2:	47b8      	blx	r7

		delay_ms(10);
   804e4:	4630      	mov	r0, r6
   804e6:	47a8      	blx	r5

		byteToLcd[0] = 0x8;
   804e8:	f88d 9010 	strb.w	r9, [sp, #16]
		i2cdata.buffer = &byteToLcd;
   804ec:	9407      	str	r4, [sp, #28]
		twi_master_write(TWI1, &i2cdata);
   804ee:	a905      	add	r1, sp, #20
   804f0:	4640      	mov	r0, r8
   804f2:	47b8      	blx	r7
			
		delay_ms(10);
   804f4:	4630      	mov	r0, r6
   804f6:	47a8      	blx	r5
   804f8:	e7d8      	b.n	804ac <main+0x64>
   804fa:	bf00      	nop
   804fc:	2007000d 	.word	0x2007000d
   80500:	400e0600 	.word	0x400e0600
   80504:	000186a0 	.word	0x000186a0
   80508:	0501bd00 	.word	0x0501bd00
   8050c:	40090000 	.word	0x40090000
   80510:	00080219 	.word	0x00080219
   80514:	0008027d 	.word	0x0008027d
   80518:	20070001 	.word	0x20070001

0008051c <__libc_init_array>:
   8051c:	b570      	push	{r4, r5, r6, lr}
   8051e:	4e0f      	ldr	r6, [pc, #60]	; (8055c <__libc_init_array+0x40>)
   80520:	4d0f      	ldr	r5, [pc, #60]	; (80560 <__libc_init_array+0x44>)
   80522:	1b76      	subs	r6, r6, r5
   80524:	10b6      	asrs	r6, r6, #2
   80526:	bf18      	it	ne
   80528:	2400      	movne	r4, #0
   8052a:	d005      	beq.n	80538 <__libc_init_array+0x1c>
   8052c:	3401      	adds	r4, #1
   8052e:	f855 3b04 	ldr.w	r3, [r5], #4
   80532:	4798      	blx	r3
   80534:	42a6      	cmp	r6, r4
   80536:	d1f9      	bne.n	8052c <__libc_init_array+0x10>
   80538:	4e0a      	ldr	r6, [pc, #40]	; (80564 <__libc_init_array+0x48>)
   8053a:	4d0b      	ldr	r5, [pc, #44]	; (80568 <__libc_init_array+0x4c>)
   8053c:	f000 f8a8 	bl	80690 <_init>
   80540:	1b76      	subs	r6, r6, r5
   80542:	10b6      	asrs	r6, r6, #2
   80544:	bf18      	it	ne
   80546:	2400      	movne	r4, #0
   80548:	d006      	beq.n	80558 <__libc_init_array+0x3c>
   8054a:	3401      	adds	r4, #1
   8054c:	f855 3b04 	ldr.w	r3, [r5], #4
   80550:	4798      	blx	r3
   80552:	42a6      	cmp	r6, r4
   80554:	d1f9      	bne.n	8054a <__libc_init_array+0x2e>
   80556:	bd70      	pop	{r4, r5, r6, pc}
   80558:	bd70      	pop	{r4, r5, r6, pc}
   8055a:	bf00      	nop
   8055c:	0008069c 	.word	0x0008069c
   80560:	0008069c 	.word	0x0008069c
   80564:	000806a4 	.word	0x000806a4
   80568:	0008069c 	.word	0x0008069c

0008056c <register_fini>:
   8056c:	4b02      	ldr	r3, [pc, #8]	; (80578 <register_fini+0xc>)
   8056e:	b113      	cbz	r3, 80576 <register_fini+0xa>
   80570:	4802      	ldr	r0, [pc, #8]	; (8057c <register_fini+0x10>)
   80572:	f000 b805 	b.w	80580 <atexit>
   80576:	4770      	bx	lr
   80578:	00000000 	.word	0x00000000
   8057c:	0008058d 	.word	0x0008058d

00080580 <atexit>:
   80580:	2300      	movs	r3, #0
   80582:	4601      	mov	r1, r0
   80584:	461a      	mov	r2, r3
   80586:	4618      	mov	r0, r3
   80588:	f000 b81e 	b.w	805c8 <__register_exitproc>

0008058c <__libc_fini_array>:
   8058c:	b538      	push	{r3, r4, r5, lr}
   8058e:	4c0a      	ldr	r4, [pc, #40]	; (805b8 <__libc_fini_array+0x2c>)
   80590:	4d0a      	ldr	r5, [pc, #40]	; (805bc <__libc_fini_array+0x30>)
   80592:	1b64      	subs	r4, r4, r5
   80594:	10a4      	asrs	r4, r4, #2
   80596:	d00a      	beq.n	805ae <__libc_fini_array+0x22>
   80598:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8059c:	3b01      	subs	r3, #1
   8059e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   805a2:	3c01      	subs	r4, #1
   805a4:	f855 3904 	ldr.w	r3, [r5], #-4
   805a8:	4798      	blx	r3
   805aa:	2c00      	cmp	r4, #0
   805ac:	d1f9      	bne.n	805a2 <__libc_fini_array+0x16>
   805ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   805b2:	f000 b877 	b.w	806a4 <_fini>
   805b6:	bf00      	nop
   805b8:	000806b4 	.word	0x000806b4
   805bc:	000806b0 	.word	0x000806b0

000805c0 <__retarget_lock_acquire_recursive>:
   805c0:	4770      	bx	lr
   805c2:	bf00      	nop

000805c4 <__retarget_lock_release_recursive>:
   805c4:	4770      	bx	lr
   805c6:	bf00      	nop

000805c8 <__register_exitproc>:
   805c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   805cc:	4d2c      	ldr	r5, [pc, #176]	; (80680 <__register_exitproc+0xb8>)
   805ce:	4606      	mov	r6, r0
   805d0:	6828      	ldr	r0, [r5, #0]
   805d2:	4698      	mov	r8, r3
   805d4:	460f      	mov	r7, r1
   805d6:	4691      	mov	r9, r2
   805d8:	f7ff fff2 	bl	805c0 <__retarget_lock_acquire_recursive>
   805dc:	4b29      	ldr	r3, [pc, #164]	; (80684 <__register_exitproc+0xbc>)
   805de:	681c      	ldr	r4, [r3, #0]
   805e0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   805e4:	2b00      	cmp	r3, #0
   805e6:	d03e      	beq.n	80666 <__register_exitproc+0x9e>
   805e8:	685a      	ldr	r2, [r3, #4]
   805ea:	2a1f      	cmp	r2, #31
   805ec:	dc1c      	bgt.n	80628 <__register_exitproc+0x60>
   805ee:	f102 0e01 	add.w	lr, r2, #1
   805f2:	b176      	cbz	r6, 80612 <__register_exitproc+0x4a>
   805f4:	2101      	movs	r1, #1
   805f6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   805fa:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   805fe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80602:	4091      	lsls	r1, r2
   80604:	4308      	orrs	r0, r1
   80606:	2e02      	cmp	r6, #2
   80608:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8060c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80610:	d023      	beq.n	8065a <__register_exitproc+0x92>
   80612:	3202      	adds	r2, #2
   80614:	f8c3 e004 	str.w	lr, [r3, #4]
   80618:	6828      	ldr	r0, [r5, #0]
   8061a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8061e:	f7ff ffd1 	bl	805c4 <__retarget_lock_release_recursive>
   80622:	2000      	movs	r0, #0
   80624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80628:	4b17      	ldr	r3, [pc, #92]	; (80688 <__register_exitproc+0xc0>)
   8062a:	b30b      	cbz	r3, 80670 <__register_exitproc+0xa8>
   8062c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80630:	f3af 8000 	nop.w
   80634:	4603      	mov	r3, r0
   80636:	b1d8      	cbz	r0, 80670 <__register_exitproc+0xa8>
   80638:	2000      	movs	r0, #0
   8063a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8063e:	f04f 0e01 	mov.w	lr, #1
   80642:	6058      	str	r0, [r3, #4]
   80644:	6019      	str	r1, [r3, #0]
   80646:	4602      	mov	r2, r0
   80648:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8064c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80650:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80654:	2e00      	cmp	r6, #0
   80656:	d0dc      	beq.n	80612 <__register_exitproc+0x4a>
   80658:	e7cc      	b.n	805f4 <__register_exitproc+0x2c>
   8065a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8065e:	4301      	orrs	r1, r0
   80660:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80664:	e7d5      	b.n	80612 <__register_exitproc+0x4a>
   80666:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8066a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8066e:	e7bb      	b.n	805e8 <__register_exitproc+0x20>
   80670:	6828      	ldr	r0, [r5, #0]
   80672:	f7ff ffa7 	bl	805c4 <__retarget_lock_release_recursive>
   80676:	f04f 30ff 	mov.w	r0, #4294967295
   8067a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8067e:	bf00      	nop
   80680:	20070568 	.word	0x20070568
   80684:	0008068c 	.word	0x0008068c
   80688:	00000000 	.word	0x00000000

0008068c <_global_impure_ptr>:
   8068c:	20070140                                @.. 

00080690 <_init>:
   80690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80692:	bf00      	nop
   80694:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80696:	bc08      	pop	{r3}
   80698:	469e      	mov	lr, r3
   8069a:	4770      	bx	lr

0008069c <__init_array_start>:
   8069c:	0008056d 	.word	0x0008056d

000806a0 <__frame_dummy_init_array_entry>:
   806a0:	00080119                                ....

000806a4 <_fini>:
   806a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806a6:	bf00      	nop
   806a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   806aa:	bc08      	pop	{r3}
   806ac:	469e      	mov	lr, r3
   806ae:	4770      	bx	lr

000806b0 <__fini_array_start>:
   806b0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <__atexit_recursive_mutex>:
20070568:	200705f8                                ... 
