
CppLibrary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20070000  000806f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  2007042c  00080b1c  0002042c  2**2
                  ALLOC
  3 .stack        00002004  200704dc  00080bcc  0002042c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020455  2**0
                  CONTENTS, READONLY
  6 .debug_info   000080b0  00000000  00000000  000204ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e2  00000000  00000000  0002855e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001b84  00000000  00000000  00029740  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000420  00000000  00000000  0002b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003e0  00000000  00000000  0002b6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00002c5f  00000000  00000000  0002bac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005cca  00000000  00000000  0002e723  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062759  00000000  00000000  000343ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a0c  00000000  00000000  00096b48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e0 24 07 20 b1 04 08 00 ad 04 08 00 ad 04 08 00     .$. ............
   80010:	ad 04 08 00 ad 04 08 00 ad 04 08 00 00 00 00 00     ................
	...
   8002c:	ad 04 08 00 ad 04 08 00 00 00 00 00 ad 04 08 00     ................
   8003c:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   8004c:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   8005c:	ad 04 08 00 ad 04 08 00 ad 04 08 00 00 00 00 00     ................
   8006c:	3d 04 08 00 51 04 08 00 65 04 08 00 79 04 08 00     =...Q...e...y...
	...
   80084:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   80094:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800a4:	00 00 00 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800b4:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800c4:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800d4:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................
   800e4:	ad 04 08 00 ad 04 08 00 ad 04 08 00 ad 04 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007042c 	.word	0x2007042c
   80110:	00000000 	.word	0x00000000
   80114:	000806f0 	.word	0x000806f0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000806f0 	.word	0x000806f0
   80154:	20070430 	.word	0x20070430
   80158:	000806f0 	.word	0x000806f0
   8015c:	00000000 	.word	0x00000000

00080160 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80160:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80162:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80166:	4b16      	ldr	r3, [pc, #88]	; (801c0 <board_init+0x60>)
   80168:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8016a:	200b      	movs	r0, #11
   8016c:	4c15      	ldr	r4, [pc, #84]	; (801c4 <board_init+0x64>)
   8016e:	47a0      	blx	r4
   80170:	200c      	movs	r0, #12
   80172:	47a0      	blx	r4
   80174:	200d      	movs	r0, #13
   80176:	47a0      	blx	r4
   80178:	200e      	movs	r0, #14
   8017a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8017c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80180:	203b      	movs	r0, #59	; 0x3b
   80182:	4c11      	ldr	r4, [pc, #68]	; (801c8 <board_init+0x68>)
   80184:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80186:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8018a:	2055      	movs	r0, #85	; 0x55
   8018c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8018e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80192:	2056      	movs	r0, #86	; 0x56
   80194:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80196:	490d      	ldr	r1, [pc, #52]	; (801cc <board_init+0x6c>)
   80198:	2068      	movs	r0, #104	; 0x68
   8019a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8019c:	490c      	ldr	r1, [pc, #48]	; (801d0 <board_init+0x70>)
   8019e:	205c      	movs	r0, #92	; 0x5c
   801a0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   801a2:	4a0c      	ldr	r2, [pc, #48]	; (801d4 <board_init+0x74>)
   801a4:	f44f 7140 	mov.w	r1, #768	; 0x300
   801a8:	480b      	ldr	r0, [pc, #44]	; (801d8 <board_init+0x78>)
   801aa:	4b0c      	ldr	r3, [pc, #48]	; (801dc <board_init+0x7c>)
   801ac:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   801ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801b2:	202b      	movs	r0, #43	; 0x2b
   801b4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   801b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801ba:	202a      	movs	r0, #42	; 0x2a
   801bc:	47a0      	blx	r4
   801be:	bd10      	pop	{r4, pc}
   801c0:	400e1a50 	.word	0x400e1a50
   801c4:	0008048d 	.word	0x0008048d
   801c8:	00080281 	.word	0x00080281
   801cc:	28000079 	.word	0x28000079
   801d0:	28000001 	.word	0x28000001
   801d4:	08000001 	.word	0x08000001
   801d8:	400e0e00 	.word	0x400e0e00
   801dc:	00080351 	.word	0x00080351

000801e0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   801e0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   801e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   801e6:	d016      	beq.n	80216 <pio_set_peripheral+0x36>
   801e8:	d80b      	bhi.n	80202 <pio_set_peripheral+0x22>
   801ea:	b149      	cbz	r1, 80200 <pio_set_peripheral+0x20>
   801ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   801f0:	d105      	bne.n	801fe <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   801f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   801f4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   801f6:	400b      	ands	r3, r1
   801f8:	ea23 0302 	bic.w	r3, r3, r2
   801fc:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   801fe:	6042      	str	r2, [r0, #4]
   80200:	4770      	bx	lr
	switch (ul_type) {
   80202:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80206:	d0fb      	beq.n	80200 <pio_set_peripheral+0x20>
   80208:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8020c:	d0f8      	beq.n	80200 <pio_set_peripheral+0x20>
   8020e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80212:	d1f4      	bne.n	801fe <pio_set_peripheral+0x1e>
   80214:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80216:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80218:	4313      	orrs	r3, r2
   8021a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8021c:	e7ef      	b.n	801fe <pio_set_peripheral+0x1e>

0008021e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8021e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80220:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80224:	bf14      	ite	ne
   80226:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80228:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8022a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8022e:	bf14      	ite	ne
   80230:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80232:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80234:	f012 0f02 	tst.w	r2, #2
   80238:	d107      	bne.n	8024a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8023a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8023e:	bf18      	it	ne
   80240:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80244:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80246:	6001      	str	r1, [r0, #0]
   80248:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8024a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8024e:	e7f9      	b.n	80244 <pio_set_input+0x26>

00080250 <pio_set_output>:
{
   80250:	b410      	push	{r4}
   80252:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80254:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80256:	b944      	cbnz	r4, 8026a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80258:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8025a:	b143      	cbz	r3, 8026e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8025c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8025e:	b942      	cbnz	r2, 80272 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80260:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80262:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80264:	6001      	str	r1, [r0, #0]
}
   80266:	bc10      	pop	{r4}
   80268:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8026a:	6641      	str	r1, [r0, #100]	; 0x64
   8026c:	e7f5      	b.n	8025a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8026e:	6541      	str	r1, [r0, #84]	; 0x54
   80270:	e7f5      	b.n	8025e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80272:	6301      	str	r1, [r0, #48]	; 0x30
   80274:	e7f5      	b.n	80262 <pio_set_output+0x12>

00080276 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80276:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80278:	4770      	bx	lr

0008027a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8027a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8027c:	4770      	bx	lr
	...

00080280 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80280:	b570      	push	{r4, r5, r6, lr}
   80282:	b082      	sub	sp, #8
   80284:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80286:	0943      	lsrs	r3, r0, #5
   80288:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8028c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80290:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80292:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80296:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8029a:	d031      	beq.n	80300 <pio_configure_pin+0x80>
   8029c:	d816      	bhi.n	802cc <pio_configure_pin+0x4c>
   8029e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   802a2:	d01b      	beq.n	802dc <pio_configure_pin+0x5c>
   802a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   802a8:	d116      	bne.n	802d8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   802aa:	f000 001f 	and.w	r0, r0, #31
   802ae:	2601      	movs	r6, #1
   802b0:	4086      	lsls	r6, r0
   802b2:	4632      	mov	r2, r6
   802b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802b8:	4620      	mov	r0, r4
   802ba:	4b22      	ldr	r3, [pc, #136]	; (80344 <pio_configure_pin+0xc4>)
   802bc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   802be:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   802c2:	bf14      	ite	ne
   802c4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   802c6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   802c8:	2001      	movs	r0, #1
   802ca:	e017      	b.n	802fc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   802cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   802d0:	d021      	beq.n	80316 <pio_configure_pin+0x96>
   802d2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   802d6:	d01e      	beq.n	80316 <pio_configure_pin+0x96>
		return 0;
   802d8:	2000      	movs	r0, #0
   802da:	e00f      	b.n	802fc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   802dc:	f000 001f 	and.w	r0, r0, #31
   802e0:	2601      	movs	r6, #1
   802e2:	4086      	lsls	r6, r0
   802e4:	4632      	mov	r2, r6
   802e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802ea:	4620      	mov	r0, r4
   802ec:	4b15      	ldr	r3, [pc, #84]	; (80344 <pio_configure_pin+0xc4>)
   802ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
   802f0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   802f4:	bf14      	ite	ne
   802f6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   802f8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   802fa:	2001      	movs	r0, #1
}
   802fc:	b002      	add	sp, #8
   802fe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80300:	f000 011f 	and.w	r1, r0, #31
   80304:	2601      	movs	r6, #1
   80306:	462a      	mov	r2, r5
   80308:	fa06 f101 	lsl.w	r1, r6, r1
   8030c:	4620      	mov	r0, r4
   8030e:	4b0e      	ldr	r3, [pc, #56]	; (80348 <pio_configure_pin+0xc8>)
   80310:	4798      	blx	r3
	return 1;
   80312:	4630      	mov	r0, r6
		break;
   80314:	e7f2      	b.n	802fc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80316:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8031a:	f000 011f 	and.w	r1, r0, #31
   8031e:	2601      	movs	r6, #1
   80320:	ea05 0306 	and.w	r3, r5, r6
   80324:	9300      	str	r3, [sp, #0]
   80326:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8032a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8032e:	bf14      	ite	ne
   80330:	2200      	movne	r2, #0
   80332:	2201      	moveq	r2, #1
   80334:	fa06 f101 	lsl.w	r1, r6, r1
   80338:	4620      	mov	r0, r4
   8033a:	4c04      	ldr	r4, [pc, #16]	; (8034c <pio_configure_pin+0xcc>)
   8033c:	47a0      	blx	r4
	return 1;
   8033e:	4630      	mov	r0, r6
		break;
   80340:	e7dc      	b.n	802fc <pio_configure_pin+0x7c>
   80342:	bf00      	nop
   80344:	000801e1 	.word	0x000801e1
   80348:	0008021f 	.word	0x0008021f
   8034c:	00080251 	.word	0x00080251

00080350 <pio_configure_pin_group>:
{
   80350:	b570      	push	{r4, r5, r6, lr}
   80352:	b082      	sub	sp, #8
   80354:	4605      	mov	r5, r0
   80356:	460e      	mov	r6, r1
   80358:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8035a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8035e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80362:	d027      	beq.n	803b4 <pio_configure_pin_group+0x64>
   80364:	d811      	bhi.n	8038a <pio_configure_pin_group+0x3a>
   80366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8036a:	d016      	beq.n	8039a <pio_configure_pin_group+0x4a>
   8036c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80370:	d111      	bne.n	80396 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80372:	460a      	mov	r2, r1
   80374:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80378:	4b19      	ldr	r3, [pc, #100]	; (803e0 <pio_configure_pin_group+0x90>)
   8037a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8037c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80380:	bf14      	ite	ne
   80382:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80384:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80386:	2001      	movs	r0, #1
   80388:	e012      	b.n	803b0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8038a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8038e:	d015      	beq.n	803bc <pio_configure_pin_group+0x6c>
   80390:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80394:	d012      	beq.n	803bc <pio_configure_pin_group+0x6c>
		return 0;
   80396:	2000      	movs	r0, #0
   80398:	e00a      	b.n	803b0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8039a:	460a      	mov	r2, r1
   8039c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803a0:	4b0f      	ldr	r3, [pc, #60]	; (803e0 <pio_configure_pin_group+0x90>)
   803a2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   803a4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   803a8:	bf14      	ite	ne
   803aa:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   803ac:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   803ae:	2001      	movs	r0, #1
}
   803b0:	b002      	add	sp, #8
   803b2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   803b4:	4b0b      	ldr	r3, [pc, #44]	; (803e4 <pio_configure_pin_group+0x94>)
   803b6:	4798      	blx	r3
	return 1;
   803b8:	2001      	movs	r0, #1
		break;
   803ba:	e7f9      	b.n	803b0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   803bc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   803c0:	f004 0301 	and.w	r3, r4, #1
   803c4:	9300      	str	r3, [sp, #0]
   803c6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   803ca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   803ce:	bf14      	ite	ne
   803d0:	2200      	movne	r2, #0
   803d2:	2201      	moveq	r2, #1
   803d4:	4631      	mov	r1, r6
   803d6:	4628      	mov	r0, r5
   803d8:	4c03      	ldr	r4, [pc, #12]	; (803e8 <pio_configure_pin_group+0x98>)
   803da:	47a0      	blx	r4
	return 1;
   803dc:	2001      	movs	r0, #1
		break;
   803de:	e7e7      	b.n	803b0 <pio_configure_pin_group+0x60>
   803e0:	000801e1 	.word	0x000801e1
   803e4:	0008021f 	.word	0x0008021f
   803e8:	00080251 	.word	0x00080251

000803ec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   803ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803f0:	4604      	mov	r4, r0
   803f2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   803f4:	4b0e      	ldr	r3, [pc, #56]	; (80430 <pio_handler_process+0x44>)
   803f6:	4798      	blx	r3
   803f8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   803fa:	4620      	mov	r0, r4
   803fc:	4b0d      	ldr	r3, [pc, #52]	; (80434 <pio_handler_process+0x48>)
   803fe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80400:	4005      	ands	r5, r0
   80402:	d013      	beq.n	8042c <pio_handler_process+0x40>
   80404:	4c0c      	ldr	r4, [pc, #48]	; (80438 <pio_handler_process+0x4c>)
   80406:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8040a:	e003      	b.n	80414 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8040c:	42b4      	cmp	r4, r6
   8040e:	d00d      	beq.n	8042c <pio_handler_process+0x40>
   80410:	3410      	adds	r4, #16
		while (status != 0) {
   80412:	b15d      	cbz	r5, 8042c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80414:	6820      	ldr	r0, [r4, #0]
   80416:	4540      	cmp	r0, r8
   80418:	d1f8      	bne.n	8040c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8041a:	6861      	ldr	r1, [r4, #4]
   8041c:	4229      	tst	r1, r5
   8041e:	d0f5      	beq.n	8040c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80420:	68e3      	ldr	r3, [r4, #12]
   80422:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80424:	6863      	ldr	r3, [r4, #4]
   80426:	ea25 0503 	bic.w	r5, r5, r3
   8042a:	e7ef      	b.n	8040c <pio_handler_process+0x20>
   8042c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80430:	00080277 	.word	0x00080277
   80434:	0008027b 	.word	0x0008027b
   80438:	20070448 	.word	0x20070448

0008043c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8043c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8043e:	210b      	movs	r1, #11
   80440:	4801      	ldr	r0, [pc, #4]	; (80448 <PIOA_Handler+0xc>)
   80442:	4b02      	ldr	r3, [pc, #8]	; (8044c <PIOA_Handler+0x10>)
   80444:	4798      	blx	r3
   80446:	bd08      	pop	{r3, pc}
   80448:	400e0e00 	.word	0x400e0e00
   8044c:	000803ed 	.word	0x000803ed

00080450 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80450:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80452:	210c      	movs	r1, #12
   80454:	4801      	ldr	r0, [pc, #4]	; (8045c <PIOB_Handler+0xc>)
   80456:	4b02      	ldr	r3, [pc, #8]	; (80460 <PIOB_Handler+0x10>)
   80458:	4798      	blx	r3
   8045a:	bd08      	pop	{r3, pc}
   8045c:	400e1000 	.word	0x400e1000
   80460:	000803ed 	.word	0x000803ed

00080464 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80464:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80466:	210d      	movs	r1, #13
   80468:	4801      	ldr	r0, [pc, #4]	; (80470 <PIOC_Handler+0xc>)
   8046a:	4b02      	ldr	r3, [pc, #8]	; (80474 <PIOC_Handler+0x10>)
   8046c:	4798      	blx	r3
   8046e:	bd08      	pop	{r3, pc}
   80470:	400e1200 	.word	0x400e1200
   80474:	000803ed 	.word	0x000803ed

00080478 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80478:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8047a:	210e      	movs	r1, #14
   8047c:	4801      	ldr	r0, [pc, #4]	; (80484 <PIOD_Handler+0xc>)
   8047e:	4b02      	ldr	r3, [pc, #8]	; (80488 <PIOD_Handler+0x10>)
   80480:	4798      	blx	r3
   80482:	bd08      	pop	{r3, pc}
   80484:	400e1400 	.word	0x400e1400
   80488:	000803ed 	.word	0x000803ed

0008048c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   8048c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80490:	4b05      	ldr	r3, [pc, #20]	; (804a8 <pmc_enable_periph_clk+0x1c>)
   80492:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   80496:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   8049a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   8049e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   804a2:	2000      	movs	r0, #0
   804a4:	4770      	bx	lr
   804a6:	bf00      	nop
   804a8:	400e0600 	.word	0x400e0600

000804ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   804ac:	e7fe      	b.n	804ac <Dummy_Handler>
	...

000804b0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   804b0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   804b2:	4b1c      	ldr	r3, [pc, #112]	; (80524 <Reset_Handler+0x74>)
   804b4:	4a1c      	ldr	r2, [pc, #112]	; (80528 <Reset_Handler+0x78>)
   804b6:	429a      	cmp	r2, r3
   804b8:	d010      	beq.n	804dc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   804ba:	4b1c      	ldr	r3, [pc, #112]	; (8052c <Reset_Handler+0x7c>)
   804bc:	4a19      	ldr	r2, [pc, #100]	; (80524 <Reset_Handler+0x74>)
   804be:	429a      	cmp	r2, r3
   804c0:	d20c      	bcs.n	804dc <Reset_Handler+0x2c>
   804c2:	3b01      	subs	r3, #1
   804c4:	1a9b      	subs	r3, r3, r2
   804c6:	f023 0303 	bic.w	r3, r3, #3
   804ca:	3304      	adds	r3, #4
   804cc:	4413      	add	r3, r2
   804ce:	4916      	ldr	r1, [pc, #88]	; (80528 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   804d0:	f851 0b04 	ldr.w	r0, [r1], #4
   804d4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   804d8:	429a      	cmp	r2, r3
   804da:	d1f9      	bne.n	804d0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   804dc:	4b14      	ldr	r3, [pc, #80]	; (80530 <Reset_Handler+0x80>)
   804de:	4a15      	ldr	r2, [pc, #84]	; (80534 <Reset_Handler+0x84>)
   804e0:	429a      	cmp	r2, r3
   804e2:	d20a      	bcs.n	804fa <Reset_Handler+0x4a>
   804e4:	3b01      	subs	r3, #1
   804e6:	1a9b      	subs	r3, r3, r2
   804e8:	f023 0303 	bic.w	r3, r3, #3
   804ec:	3304      	adds	r3, #4
   804ee:	4413      	add	r3, r2
		*pDest++ = 0;
   804f0:	2100      	movs	r1, #0
   804f2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   804f6:	4293      	cmp	r3, r2
   804f8:	d1fb      	bne.n	804f2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   804fa:	4b0f      	ldr	r3, [pc, #60]	; (80538 <Reset_Handler+0x88>)
   804fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80500:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80504:	490d      	ldr	r1, [pc, #52]	; (8053c <Reset_Handler+0x8c>)
   80506:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80508:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8050c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80510:	d203      	bcs.n	8051a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80512:	688b      	ldr	r3, [r1, #8]
   80514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80518:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8051a:	4b09      	ldr	r3, [pc, #36]	; (80540 <Reset_Handler+0x90>)
   8051c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8051e:	4b09      	ldr	r3, [pc, #36]	; (80544 <Reset_Handler+0x94>)
   80520:	4798      	blx	r3
   80522:	e7fe      	b.n	80522 <Reset_Handler+0x72>
   80524:	20070000 	.word	0x20070000
   80528:	000806f0 	.word	0x000806f0
   8052c:	2007042c 	.word	0x2007042c
   80530:	200704dc 	.word	0x200704dc
   80534:	2007042c 	.word	0x2007042c
   80538:	00080000 	.word	0x00080000
   8053c:	e000ed00 	.word	0xe000ed00
   80540:	00080559 	.word	0x00080559
   80544:	00080549 	.word	0x00080549

00080548 <main>:
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include <asf.h>

int main (void)
{
   80548:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
   8054a:	4b02      	ldr	r3, [pc, #8]	; (80554 <main+0xc>)
   8054c:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
}
   8054e:	2000      	movs	r0, #0
   80550:	bd08      	pop	{r3, pc}
   80552:	bf00      	nop
   80554:	00080161 	.word	0x00080161

00080558 <__libc_init_array>:
   80558:	b570      	push	{r4, r5, r6, lr}
   8055a:	4e0f      	ldr	r6, [pc, #60]	; (80598 <__libc_init_array+0x40>)
   8055c:	4d0f      	ldr	r5, [pc, #60]	; (8059c <__libc_init_array+0x44>)
   8055e:	1b76      	subs	r6, r6, r5
   80560:	10b6      	asrs	r6, r6, #2
   80562:	bf18      	it	ne
   80564:	2400      	movne	r4, #0
   80566:	d005      	beq.n	80574 <__libc_init_array+0x1c>
   80568:	3401      	adds	r4, #1
   8056a:	f855 3b04 	ldr.w	r3, [r5], #4
   8056e:	4798      	blx	r3
   80570:	42a6      	cmp	r6, r4
   80572:	d1f9      	bne.n	80568 <__libc_init_array+0x10>
   80574:	4e0a      	ldr	r6, [pc, #40]	; (805a0 <__libc_init_array+0x48>)
   80576:	4d0b      	ldr	r5, [pc, #44]	; (805a4 <__libc_init_array+0x4c>)
   80578:	f000 f8a8 	bl	806cc <_init>
   8057c:	1b76      	subs	r6, r6, r5
   8057e:	10b6      	asrs	r6, r6, #2
   80580:	bf18      	it	ne
   80582:	2400      	movne	r4, #0
   80584:	d006      	beq.n	80594 <__libc_init_array+0x3c>
   80586:	3401      	adds	r4, #1
   80588:	f855 3b04 	ldr.w	r3, [r5], #4
   8058c:	4798      	blx	r3
   8058e:	42a6      	cmp	r6, r4
   80590:	d1f9      	bne.n	80586 <__libc_init_array+0x2e>
   80592:	bd70      	pop	{r4, r5, r6, pc}
   80594:	bd70      	pop	{r4, r5, r6, pc}
   80596:	bf00      	nop
   80598:	000806d8 	.word	0x000806d8
   8059c:	000806d8 	.word	0x000806d8
   805a0:	000806e0 	.word	0x000806e0
   805a4:	000806d8 	.word	0x000806d8

000805a8 <register_fini>:
   805a8:	4b02      	ldr	r3, [pc, #8]	; (805b4 <register_fini+0xc>)
   805aa:	b113      	cbz	r3, 805b2 <register_fini+0xa>
   805ac:	4802      	ldr	r0, [pc, #8]	; (805b8 <register_fini+0x10>)
   805ae:	f000 b805 	b.w	805bc <atexit>
   805b2:	4770      	bx	lr
   805b4:	00000000 	.word	0x00000000
   805b8:	000805c9 	.word	0x000805c9

000805bc <atexit>:
   805bc:	2300      	movs	r3, #0
   805be:	4601      	mov	r1, r0
   805c0:	461a      	mov	r2, r3
   805c2:	4618      	mov	r0, r3
   805c4:	f000 b81e 	b.w	80604 <__register_exitproc>

000805c8 <__libc_fini_array>:
   805c8:	b538      	push	{r3, r4, r5, lr}
   805ca:	4c0a      	ldr	r4, [pc, #40]	; (805f4 <__libc_fini_array+0x2c>)
   805cc:	4d0a      	ldr	r5, [pc, #40]	; (805f8 <__libc_fini_array+0x30>)
   805ce:	1b64      	subs	r4, r4, r5
   805d0:	10a4      	asrs	r4, r4, #2
   805d2:	d00a      	beq.n	805ea <__libc_fini_array+0x22>
   805d4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   805d8:	3b01      	subs	r3, #1
   805da:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   805de:	3c01      	subs	r4, #1
   805e0:	f855 3904 	ldr.w	r3, [r5], #-4
   805e4:	4798      	blx	r3
   805e6:	2c00      	cmp	r4, #0
   805e8:	d1f9      	bne.n	805de <__libc_fini_array+0x16>
   805ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   805ee:	f000 b877 	b.w	806e0 <_fini>
   805f2:	bf00      	nop
   805f4:	000806f0 	.word	0x000806f0
   805f8:	000806ec 	.word	0x000806ec

000805fc <__retarget_lock_acquire_recursive>:
   805fc:	4770      	bx	lr
   805fe:	bf00      	nop

00080600 <__retarget_lock_release_recursive>:
   80600:	4770      	bx	lr
   80602:	bf00      	nop

00080604 <__register_exitproc>:
   80604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80608:	4d2c      	ldr	r5, [pc, #176]	; (806bc <__register_exitproc+0xb8>)
   8060a:	4606      	mov	r6, r0
   8060c:	6828      	ldr	r0, [r5, #0]
   8060e:	4698      	mov	r8, r3
   80610:	460f      	mov	r7, r1
   80612:	4691      	mov	r9, r2
   80614:	f7ff fff2 	bl	805fc <__retarget_lock_acquire_recursive>
   80618:	4b29      	ldr	r3, [pc, #164]	; (806c0 <__register_exitproc+0xbc>)
   8061a:	681c      	ldr	r4, [r3, #0]
   8061c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80620:	2b00      	cmp	r3, #0
   80622:	d03e      	beq.n	806a2 <__register_exitproc+0x9e>
   80624:	685a      	ldr	r2, [r3, #4]
   80626:	2a1f      	cmp	r2, #31
   80628:	dc1c      	bgt.n	80664 <__register_exitproc+0x60>
   8062a:	f102 0e01 	add.w	lr, r2, #1
   8062e:	b176      	cbz	r6, 8064e <__register_exitproc+0x4a>
   80630:	2101      	movs	r1, #1
   80632:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80636:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8063a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8063e:	4091      	lsls	r1, r2
   80640:	4308      	orrs	r0, r1
   80642:	2e02      	cmp	r6, #2
   80644:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80648:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8064c:	d023      	beq.n	80696 <__register_exitproc+0x92>
   8064e:	3202      	adds	r2, #2
   80650:	f8c3 e004 	str.w	lr, [r3, #4]
   80654:	6828      	ldr	r0, [r5, #0]
   80656:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8065a:	f7ff ffd1 	bl	80600 <__retarget_lock_release_recursive>
   8065e:	2000      	movs	r0, #0
   80660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80664:	4b17      	ldr	r3, [pc, #92]	; (806c4 <__register_exitproc+0xc0>)
   80666:	b30b      	cbz	r3, 806ac <__register_exitproc+0xa8>
   80668:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8066c:	f3af 8000 	nop.w
   80670:	4603      	mov	r3, r0
   80672:	b1d8      	cbz	r0, 806ac <__register_exitproc+0xa8>
   80674:	2000      	movs	r0, #0
   80676:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8067a:	f04f 0e01 	mov.w	lr, #1
   8067e:	6058      	str	r0, [r3, #4]
   80680:	6019      	str	r1, [r3, #0]
   80682:	4602      	mov	r2, r0
   80684:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80688:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8068c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80690:	2e00      	cmp	r6, #0
   80692:	d0dc      	beq.n	8064e <__register_exitproc+0x4a>
   80694:	e7cc      	b.n	80630 <__register_exitproc+0x2c>
   80696:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8069a:	4301      	orrs	r1, r0
   8069c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   806a0:	e7d5      	b.n	8064e <__register_exitproc+0x4a>
   806a2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   806a6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   806aa:	e7bb      	b.n	80624 <__register_exitproc+0x20>
   806ac:	6828      	ldr	r0, [r5, #0]
   806ae:	f7ff ffa7 	bl	80600 <__retarget_lock_release_recursive>
   806b2:	f04f 30ff 	mov.w	r0, #4294967295
   806b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   806ba:	bf00      	nop
   806bc:	20070428 	.word	0x20070428
   806c0:	000806c8 	.word	0x000806c8
   806c4:	00000000 	.word	0x00000000

000806c8 <_global_impure_ptr>:
   806c8:	20070000                                ... 

000806cc <_init>:
   806cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806ce:	bf00      	nop
   806d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   806d2:	bc08      	pop	{r3}
   806d4:	469e      	mov	lr, r3
   806d6:	4770      	bx	lr

000806d8 <__init_array_start>:
   806d8:	000805a9 	.word	0x000805a9

000806dc <__frame_dummy_init_array_entry>:
   806dc:	00080119                                ....

000806e0 <_fini>:
   806e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806e2:	bf00      	nop
   806e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   806e6:	bc08      	pop	{r3}
   806e8:	469e      	mov	lr, r3
   806ea:	4770      	bx	lr

000806ec <__fini_array_start>:
   806ec:	000800f5 	.word	0x000800f5
